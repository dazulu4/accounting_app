# =============================================================================
# Coverage Configuration - Enterprise Edition
# =============================================================================
# Professional coverage configuration for enterprise-grade code quality
# monitoring with comprehensive reporting and quality gates.

[run]
# Source code directories to analyze
source = domain, application, infrastructure

# Include patterns
include = 
    domain/*
    application/*
    infrastructure/*

# Exclude patterns - files/directories not to measure
omit = 
    */tests/*
    */test_*
    */__pycache__/*
    */migrations/*
    */venv/*
    */.venv/*
    */node_modules/*
    */.aws-sam/*
    */conftest.py
    */setup.py
    */manage.py
    */.git/*
    */htmlcov/*
    */build/*
    */dist/*

# Branch coverage enabled for comprehensive analysis
branch = True

# Parallel processing
parallel = True

# Data file location
data_file = .coverage

# Plugins
plugins = 
    coverage_conditional_plugin

[report]
# Quality gates - minimum coverage percentage
precision = 2
skip_covered = False
skip_empty = True
sort = Cover

# Show missing lines in terminal report
show_missing = True

# Exclude lines from coverage
exclude_lines =
    # Standard exclusions
    pragma: no cover
    def __repr__
    def __str__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if False:
    if __name__ == .__main__.:
    
    # Type checking
    if TYPE_CHECKING:
    if typing.TYPE_CHECKING:
    
    # Abstract methods
    @abstractmethod
    @abc.abstractmethod
    
    # Protocol methods
    \.\.\.$
    pass$
    
    # Development/debug code
    print\(.*\)
    logger\.debug\(.*\)
    breakpoint\(\)
    
    # Platform specific
    if sys.platform
    if platform.system
    
    # Exception handling that shouldn't be tested
    except ImportError:
    except ModuleNotFoundError:

# Minimum coverage percentages per file
fail_under = 85

[html]
# HTML report configuration
directory = htmlcov
title = Task Management API - Coverage Report
show_contexts = True
skip_covered = False
skip_empty = True

# Custom CSS for better presentation
extra_css = 
    htmlcov/custom.css

[xml]
# XML report for CI/CD integration
output = coverage.xml

[json]
# JSON report for programmatic analysis
output = coverage.json
pretty_print = True
show_contexts = True

# =============================================================================
# Quality Gates per Component
# =============================================================================

[coverage:paths]
# Path aliases for consistent reporting
source = 
    domain/
    application/
    infrastructure/

[coverage:run:domain]
# Domain layer should have highest coverage (business logic)
fail_under = 95

[coverage:run:application]
# Application layer coverage requirements
fail_under = 90

[coverage:run:infrastructure]
# Infrastructure layer coverage requirements
fail_under = 80

# =============================================================================
# Enterprise Reporting Configuration
# =============================================================================

[coverage:report:domain]
# Domain-specific reporting
include = domain/*
exclude_lines =
    # Domain entities may have simple getters/setters
    @property
    def __.*__\(self.*\):

[coverage:report:application]
# Application-specific reporting  
include = application/*
exclude_lines =
    # Configuration files may have environment-specific code
    if os.getenv
    if settings.

[coverage:report:infrastructure]
# Infrastructure-specific reporting
include = infrastructure/*
exclude_lines =
    # Infrastructure may have platform-specific code
    if sys.platform
    except ConnectionError:
    except DatabaseError: 