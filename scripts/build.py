#!/usr/bin/env python3
"""
Script de build para AWS SAM
Este script automatiza el proceso de preparaci√≥n para el despliegue en AWS Lambda
"""

import os
import sys
import shutil
import subprocess
import json
from pathlib import Path
from typing import List, Dict, Any

# Configuraci√≥n
PROJECT_ROOT = Path(__file__).parent.parent
BUILD_DIR = PROJECT_ROOT / ".aws-sam"
PACKAGE_DIR = PROJECT_ROOT / "package"
TEMPLATE_FILE = PROJECT_ROOT / "template.yaml"

# Directorios a copiar
DIRECTORIES_TO_COPY = [
    "application",
    "domain", 
    "infrastructure",
    "migration"
]

# Archivos a copiar
FILES_TO_COPY = [
    "pyproject.toml",
    "poetry.lock",
    "alembic.ini",
    "dummyusers.json"
]

def print_status(message: str) -> None:
    """Imprimir mensaje de estado"""
    print(f"üöÄ {message}")

def print_error(message: str) -> None:
    """Imprimir mensaje de error"""
    print(f"‚ùå {message}")

def print_success(message: str) -> None:
    """Imprimir mensaje de √©xito"""
    print(f"‚úÖ {message}")

def check_prerequisites() -> bool:
    """Verificar prerrequisitos"""
    print_status("Verificando prerrequisitos...")
    
    # Verificar que estamos en el directorio correcto
    if not TEMPLATE_FILE.exists():
        print_error("No se encontr√≥ template.yaml. Ejecuta este script desde el directorio ra√≠z del proyecto.")
        return False
    
    # Verificar que Poetry est√° instalado
    try:
        subprocess.run(["poetry", "--version"], check=True, capture_output=True)
    except (subprocess.CalledProcessError, FileNotFoundError):
        print_error("Poetry no est√° instalado. Inst√°lalo primero.")
        return False
    
    print_success("Prerrequisitos verificados")
    return True

def clean_build_directories() -> None:
    """Limpiar directorios de build anteriores"""
    print_status("Limpiando directorios de build anteriores...")
    
    for directory in [BUILD_DIR, PACKAGE_DIR]:
        if directory.exists():
            shutil.rmtree(directory)
    
    print_success("Directorios limpiados")

def install_dependencies() -> bool:
    """Instalar dependencias con Poetry"""
    print_status("Instalando dependencias con Poetry...")
    
    try:
        subprocess.run(["poetry", "install", "--only", "main"], check=True, cwd=PROJECT_ROOT)
        print_success("Dependencias instaladas")
        return True
    except subprocess.CalledProcessError as e:
        print_error(f"Error instalando dependencias: {e}")
        return False

def create_build_directories() -> None:
    """Crear directorios de build"""
    print_status("Creando directorios de build...")
    
    BUILD_DIR.mkdir(exist_ok=True)
    PACKAGE_DIR.mkdir(exist_ok=True)
    
    print_success("Directorios creados")

def copy_application_files() -> None:
    """Copiar archivos de la aplicaci√≥n"""
    print_status("Copiando archivos de la aplicaci√≥n...")
    
    for directory in DIRECTORIES_TO_COPY:
        src = PROJECT_ROOT / directory
        dst = PACKAGE_DIR / directory
        
        if src.exists():
            shutil.copytree(src, dst)
            print(f"  üìÅ Copiado: {directory}")
    
    for file in FILES_TO_COPY:
        src = PROJECT_ROOT / file
        dst = PACKAGE_DIR / file
        
        if src.exists():
            shutil.copy2(src, dst)
            print(f"  üìÑ Copiado: {file}")
    
    print_success("Archivos de aplicaci√≥n copiados")

def create_requirements_txt() -> bool:
    """Crear requirements.txt para Lambda"""
    print_status("Creando requirements.txt para Lambda...")
    
    try:
        # Crear requirements.txt manualmente basado en pyproject.toml
        requirements_content = """# Requirements para AWS Lambda
# Generado autom√°ticamente por build script

# Framework web
flask==3.1.1
flask-cors==6.0.1

# Base de datos
sqlalchemy[asyncio]==2.0.41
aiomysql==0.2.0
pymysql==1.1.1
databases==0.9.0

# Migraciones
alembic==1.16.4

# Validaci√≥n de datos
pydantic==2.11.7
pydantic-settings==2.10.1

# Utilidades
requests==2.32.4

# Testing (solo para desarrollo local)
pytest==8.4.1
pytest-asyncio==1.1.0
pytest-cov==4.1.0
pytest-mock==3.12.0
"""
        
        with open(PACKAGE_DIR / "requirements.txt", "w") as f:
            f.write(requirements_content)
        
        print_success("requirements.txt creado")
        return True
    except Exception as e:
        print_error(f"Error creando requirements.txt: {e}")
        return False

def create_lambda_config() -> None:
    """Crear archivos de configuraci√≥n para Lambda"""
    print_status("Creando archivos de configuraci√≥n para Lambda...")
    
    # Configuraci√≥n de Lambda
    lambda_config = '''"""
Configuraci√≥n espec√≠fica para AWS Lambda
"""
import os

# Configuraci√≥n de base de datos para Lambda
DATABASE_CONFIG = {
    'host': os.environ.get('DATABASE_HOST', 'localhost'),
    'port': int(os.environ.get('DATABASE_PORT', '3306')),
    'database': os.environ.get('DATABASE_NAME', 'accounting'),
    'user': os.environ.get('DATABASE_USER', 'admin'),
    'password': os.environ.get('DATABASE_PASSWORD', 'admin'),
}

# Configuraci√≥n de logging para Lambda
LOGGING_CONFIG = {
    'level': os.environ.get('LOG_LEVEL', 'INFO'),
    'format': '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
}

# Configuraci√≥n de la aplicaci√≥n
APP_CONFIG = {
    'environment': os.environ.get('ENVIRONMENT', 'production'),
    'version': '1.0.0'
}
'''
    
    with open(PACKAGE_DIR / "lambda_config.py", "w") as f:
        f.write(lambda_config)
    
    # Script de inicializaci√≥n
    lambda_init = '''"""
Script de inicializaci√≥n para AWS Lambda
"""
import os
import sys
import logging

# Configurar logging
logging.basicConfig(
    level=getattr(logging, os.environ.get('LOG_LEVEL', 'INFO')),
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

logger = logging.getLogger(__name__)

def init_lambda():
    """Inicializar la aplicaci√≥n para Lambda"""
    try:
        logger.info("Inicializando Accounting App en AWS Lambda...")
        
        # Verificar variables de entorno cr√≠ticas
        required_env_vars = ['DATABASE_HOST', 'DATABASE_NAME', 'DATABASE_USER', 'DATABASE_PASSWORD']
        missing_vars = [var for var in required_env_vars if not os.environ.get(var)]
        
        if missing_vars:
            logger.warning(f"Variables de entorno faltantes: {missing_vars}")
        
        logger.info("Inicializaci√≥n completada")
        
    except Exception as e:
        logger.error(f"Error en inicializaci√≥n: {str(e)}")
        raise

if __name__ == "__main__":
    init_lambda()
'''
    
    with open(PACKAGE_DIR / "lambda_init.py", "w") as f:
        f.write(lambda_init)
    
    print_success("Archivos de configuraci√≥n creados")

def create_deployment_files() -> None:
    """Crear archivos de despliegue"""
    print_status("Creando archivos de despliegue...")
    
    # samconfig.toml
    samconfig = '''version = 0.1
[default]
[default.deploy]
[default.deploy.parameters]
stack_name = "accounting-app"
s3_bucket = "aws-sam-cli-managed-default-samclisourcebucket-XXXXXXXXXXXX"
s3_prefix = "accounting-app"
region = "us-east-1"
confirm_changeset = true
capabilities = "CAPABILITY_IAM"
parameter_overrides = "Environment=production"
image_repositories = []
'''
    
    with open(PACKAGE_DIR / "samconfig.toml", "w") as f:
        f.write(samconfig)
    
    # deploy.sh
    deploy_script = '''#!/bin/bash

# Script de despliegue para AWS SAM
# Uso: ./deploy.sh [environment]

set -e

ENVIRONMENT=${1:-production}
STACK_NAME="accounting-app-${ENVIRONMENT}"

echo "Desplegando Accounting App en AWS SAM..."
echo "Environment: $ENVIRONMENT"
echo "Stack Name: $STACK_NAME"

# Verificar que AWS CLI est√° configurado
if ! aws sts get-caller-identity &> /dev/null; then
    echo "ERROR: AWS CLI no est√° configurado. Ejecuta 'aws configure' primero."
    exit 1
fi

# Verificar que SAM CLI est√° instalado
if ! command -v sam &> /dev/null; then
    echo "ERROR: AWS SAM CLI no est√° instalado."
    exit 1
fi

# Build del proyecto
echo "Construyendo proyecto..."
sam build

# Desplegar
echo "Desplegando stack..."
sam deploy \\
    --stack-name $STACK_NAME \\
    --parameter-overrides Environment=$ENVIRONMENT \\
    --capabilities CAPABILITY_IAM \\
    --no-confirm-changeset

echo "Despliegue completado!"
echo "URL de la API: $(aws cloudformation describe-stacks --stack-name $STACK_NAME --query 'Stacks[0].Outputs[?OutputKey==`AccountingApi`].OutputValue' --output text)"
'''
    
    with open(PACKAGE_DIR / "deploy.sh", "w") as f:
        f.write(deploy_script)
    
    # Hacer ejecutable el script
    os.chmod(PACKAGE_DIR / "deploy.sh", 0o755)
    
    print_success("Archivos de despliegue creados")

def create_env_files() -> None:
    """Crear archivos de variables de entorno"""
    print_status("Creando archivos de variables de entorno...")
    
    # .env.example
    env_example = '''# Configuraci√≥n de Base de Datos
DATABASE_HOST=your-rds-endpoint.region.rds.amazonaws.com
DATABASE_PORT=3306
DATABASE_NAME=accounting
DATABASE_USER=admin
DATABASE_PASSWORD=your-secure-password

# Configuraci√≥n de la Aplicaci√≥n
ENVIRONMENT=production
LOG_LEVEL=INFO

# Configuraci√≥n de AWS
AWS_REGION=us-east-1
AWS_ACCESS_KEY_ID=your-access-key
AWS_SECRET_ACCESS_KEY=your-secret-key
'''
    
    with open(PACKAGE_DIR / ".env.example", "w") as f:
        f.write(env_example)
    
    # env.json para testing local
    env_json = {
        "AccountingApiFunction": {
            "DATABASE_HOST": "localhost",
            "DATABASE_PORT": "3306",
            "DATABASE_NAME": "accounting",
            "DATABASE_USER": "admin",
            "DATABASE_PASSWORD": "admin",
            "ENVIRONMENT": "development",
            "LOG_LEVEL": "DEBUG"
        }
    }
    
    with open(PACKAGE_DIR / "env.json", "w") as f:
        json.dump(env_json, f, indent=2)
    
    print_success("Archivos de variables de entorno creados")

def create_documentation() -> None:
    """Crear documentaci√≥n de despliegue"""
    print_status("Creando documentaci√≥n de despliegue...")
    
    deployment_doc = '''# Gu√≠a de Despliegue - Accounting App

## Prerrequisitos

1. **AWS CLI** instalado y configurado
2. **AWS SAM CLI** instalado
3. **Poetry** instalado
4. **Python 3.11** instalado

## Configuraci√≥n

### 1. Configurar AWS CLI
```bash
aws configure
```

### 2. Instalar dependencias
```bash
poetry install
```

## Despliegue

### Despliegue Local (Testing)
```bash
# Build local
python scripts/build.py

# Ejecutar localmente
sam local start-api
```

### Despliegue a AWS
```bash
# Build y deploy
python scripts/build.py
cd package
./deploy.sh production
```

## Configuraci√≥n de Base de Datos

### Opci√≥n 1: RDS MySQL (Recomendado)
1. Crear instancia RDS MySQL en AWS
2. Configurar Security Groups
3. Actualizar variables de entorno en template.yaml

### Opci√≥n 2: Aurora Serverless
1. Crear cluster Aurora Serverless
2. Configurar conexiones VPC
3. Actualizar configuraci√≥n de red

## Monitoreo

### CloudWatch Logs
- Logs de Lambda: `/aws/lambda/accounting-app-function`
- M√©tricas de API Gateway
- M√©tricas de RDS

### Alertas Recomendadas
- Error rate > 5%
- Latencia > 5 segundos
- Memory usage > 80%

## Troubleshooting

### Cold Starts
- Optimizar dependencias
- Usar Lambda Layers
- Configurar Provisioned Concurrency

### Errores de Conexi√≥n a BD
- Verificar Security Groups
- Verificar credenciales
- Verificar configuraci√≥n de red

## Costos Estimados

### Lambda
- 1M requests/mes: ~$0.20
- 400,000 GB-segundos: ~$6.67

### API Gateway
- 1M requests/mes: ~$3.50

### RDS MySQL
- db.t3.micro: ~$15/mes

**Total estimado: ~$25/mes**
'''
    
    with open(PACKAGE_DIR / "DEPLOYMENT.md", "w") as f:
        f.write(deployment_doc)
    
    print_success("Documentaci√≥n creada")

def main() -> int:
    """Funci√≥n principal"""
    print("üöÄ Iniciando build de Accounting App para AWS SAM...")
    
    try:
        # Verificar prerrequisitos
        if not check_prerequisites():
            return 1
        
        # Limpiar directorios
        clean_build_directories()
        
        # Instalar dependencias
        if not install_dependencies():
            return 1
        
        # Crear directorios
        create_build_directories()
        
        # Copiar archivos
        copy_application_files()
        
        # Crear requirements.txt
        if not create_requirements_txt():
            return 1
        
        # Crear archivos de configuraci√≥n
        create_lambda_config()
        
        # Crear archivos de despliegue
        create_deployment_files()
        
        # Crear archivos de entorno
        create_env_files()
        
        # Crear documentaci√≥n
        create_documentation()
        
        print_success("Build completado exitosamente!")
        print(f"üìÅ Archivos generados en: {PACKAGE_DIR}")
        print("üìã Pr√≥ximos pasos:")
        print("   1. Configurar variables de entorno en .env.example")
        print("   2. Ejecutar: cd package && ./deploy.sh")
        print("   3. Para testing local: sam local start-api")
        
        return 0
        
    except Exception as e:
        print_error(f"Error durante el build: {e}")
        return 1

if __name__ == "__main__":
    sys.exit(main()) 